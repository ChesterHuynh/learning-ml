import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error

# save filepath to variable for easier access
housing_file_path = "/Users/ChesterHuynh/learningml/Kaggle/Tutorials/" \
                    "house-prices-advanced-regression-techniques/train.csv"
# read the data and store data in DataFrame titled housing_data
housing_data = pd.read_csv(housing_file_path)
# print a summary of the data in Housing data
# print(housing_data.describe())

print(housing_data.columns)

housing_data.dropna(axis=0)

# prediction target
y = housing_data.SalePrice
print(y.head())

housing_features = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']
two_cols_data = housing_data[housing_features]
print(two_cols_data.describe())

# random_state=1 ensures same results each run (setting seed)
housing_model = DecisionTreeRegressor(random_state=1)


X = housing_data[housing_features]
print(housing_model.fit(X, y))

print("Making predictions for the following 5 houses: ")
print(X.head())
print("The predictions are")
print(housing_model.predict(X.head()))

def get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):
    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)
    model.fit(train_X, train_y)
    pred_vals = model.predict(test_X)
    mae = mean_absolute_error(val_y, preds_vals)
    return(mae)
